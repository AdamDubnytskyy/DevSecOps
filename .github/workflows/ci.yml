name: CI
on:
  push:
    branches:
      - main
  pull_request:
jobs:
  setup-test-cluster:
    name: Test cluster
    runs-on: ubuntu-latest
    outputs:
      cluster-name: ${{ steps.cluster-info.outputs.cluster-name }}
      cluster-ready: ${{ steps.cluster-info.outputs.cluster-ready }}
    steps:
      - uses: actions/checkout@v4
      - uses: helm/kind-action@v1

      - name: Verify cluster
        run: |
            kubectl cluster-info
            kubectl get nodes -o wide
            kubectl get pods --all-namespaces

      - name: Deploy
        run: |
            kubectl create namespace httpbin

            for file in k8s/*.yml; do
                if [ -f "$file" ]; then
                kubectl apply -f "$file" || {
                    echo "Failed to apply $file, continuing..."
                }
                fi
            done

      - name: Verify deployment status is Ready
        run: |
          kubectl wait --for=condition=Ready pod -l app=httpbin -n httpbin --timeout=300s
          echo "Deployment is up & running"

      - name: Set outputs
        id: cluster-info
        run: |
            echo "cluster-name=test-cluster" >> $GITHUB_OUTPUT
            echo "cluster-ready=true" >> $GITHUB_OUTPUT

  security-risk-analysis:
    name: Security risk analysis for Kubernetes resources
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
            go-version: '1.24.2'

      - name: Install kubesec
        run: |
            go install github.com/controlplaneio/kubesec/v2@v2.14.2
            kubesec version

      - name: Find Kubernetes manifests
        id: find-manifests
        run: |
            find k8s -name "*.yaml" -o -name "*.yml" > manifest-files.txt 2>/dev/null || true
            
            if [ -s manifest-files.txt ]; then
              echo "manifests-found=true" >> $GITHUB_OUTPUT
              echo "üìã Found Kubernetes manifests:"
              cat manifest-files.txt
            else
              echo "manifests-found=false" >> $GITHUB_OUTPUT
              echo "‚ùå No Kubernetes manifests found in k8s folder"
            fi
        
      - name: Run kubesec scan
        if: steps.find-manifests.outputs.manifests-found == 'true'
        run: |
            echo "üîê Checking for critical security issues..."
      
            while IFS= read -r file; do
                if [ -f "$file" ]; then
                    echo "üîç Checking: $file"
                    
                    # Run kubesec scan
                    SCAN_OUTPUT=$(kubesec scan "$file" 2>/dev/null || echo "[]")
                    
                    # Check if critical array exists and has items
                    CRITICAL_COUNT=$(echo "$SCAN_OUTPUT" | jq '[.[] | select(.scoring.critical != null and (.scoring.critical | length > 0))] | length' 2>/dev/null || echo "0")
                    
                    if [ "$CRITICAL_COUNT" -gt 0 ]; then
                        echo "üö® CRITICAL ISSUES FOUND in $file"
                        
                        # Show the critical issues
                        echo "$SCAN_OUTPUT" | jq -r '.[] | select(.scoring.critical != null) | .scoring.critical[] | "  üö® \(.reason)"' 2>/dev/null || true
                        
                        echo "‚ùå CRITICAL SECURITY ISSUES DETECTED - FAILING WORKFLOW"
                        exit 1  # Exit immediately - no need to check variables
                    else
                        echo "‚úÖ No critical issues in $file"
                    fi
                fi
            done < manifest-files.txt
            
            echo "‚úÖ No critical security issues found in any file"

      - name: Generate detailed report
        if: steps.find-manifests.outputs.manifests-found == 'true'
        run: |
            echo "üìã Generating detailed security report..."

            echo "# Kubesec Security Report" > kubesec-report.md
            echo "Generated on: $(date)" >> kubesec-report.md
            echo "" >> kubesec-report.md

            echo "## Scanned Files" >> kubesec-report.md
            while IFS= read -r file; do
            echo "### $file" >> kubesec-report.md
            echo '```json' >> kubesec-report.md
            kubesec scan "$file" >> kubesec-report.md 2>/dev/null || echo "Failed to scan" >> kubesec-report.md
            echo '```' >> kubesec-report.md
            echo "" >> kubesec-report.md
            done < manifest-files.txt

            echo "Report generated: kubesec-report.md"

      - name: Upload kubesec report
        if: steps.find-manifests.outputs.manifests-found == 'true'
        uses: actions/upload-artifact@v4
        with:
            name: kubesec-security-report
            path: kubesec-report.md