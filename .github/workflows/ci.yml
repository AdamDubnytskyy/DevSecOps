name: CI
on:
  push:
    branches:
      - main
  pull_request:
jobs:
  setup-test-cluster:
    name: Test cluster
    runs-on: ubuntu-latest
    outputs:
      cluster-name: ${{ steps.cluster-info.outputs.cluster-name }}
      cluster-ready: ${{ steps.cluster-info.outputs.cluster-ready }}
    steps:
      - uses: actions/checkout@v4
      - uses: helm/kind-action@v1

      - name: Verify cluster
        run: |
            kubectl cluster-info
            kubectl get nodes -o wide
            kubectl get pods --all-namespaces

      - name: Deploy
        run: |
            kubectl create namespace httpbin

            for file in k8s/*.yml; do
                if [ -f "$file" ]; then
                kubectl apply -f "$file" || {
                    echo "Failed to apply $file, continuing..."
                }
                fi
            done

      - name: Verify deployment status is Ready
        run: |
          kubectl wait --for=condition=Ready pod -l app=httpbin -n httpbin --timeout=300s
          echo "Deployment is up & running"

      - name: Set outputs
        id: cluster-info
        run: |
            echo "cluster-name=test-cluster" >> $GITHUB_OUTPUT
            echo "cluster-ready=true" >> $GITHUB_OUTPUT

  security-risk-analysis:
    name: Security risk analysis for Kubernetes resources
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
            go-version: '1.24.2'

      - name: Install kubesec
        run: |
            go install github.com/controlplaneio/kubesec/v2@v2.14.2
            kubesec version

      - name: Find Kubernetes manifests
        id: find-manifests
        run: |
            find k8s -name "*.yaml" -o -name "*.yml" > manifest-files.txt 2>/dev/null || true
            
            if [ -s manifest-files.txt ]; then
              echo "manifests-found=true" >> $GITHUB_OUTPUT
              echo "üìã Found Kubernetes manifests:"
              cat manifest-files.txt
            else
              echo "manifests-found=false" >> $GITHUB_OUTPUT
              echo "‚ùå No Kubernetes manifests found in k8s folder"
            fi
        
      - name: Run kubesec scan
        if: steps.find-manifests.outputs.manifests-found == 'true'
        run: |
            echo "üîê Running kubesec security scan..."
      
            SCAN_FAILED=false
            TOTAL_FILES=0
            PASSED_FILES=0
            FAILED_FILES=0
            SKIPPED_FILES=0
            
            while IFS= read -r file; do
            if [ -f "$file" ]; then
                TOTAL_FILES=$((TOTAL_FILES + 1))
                echo ""
                echo "=================================================="
                echo "üîç Scanning: $file"
                echo "=================================================="
                
                # Run kubesec scan and capture output
                set +e
                SCAN_OUTPUT=$(kubesec scan "$file" 2>&1)
                SCAN_EXIT_CODE=$?
                set -e
                
                echo "$SCAN_OUTPUT"
                
                # Handle different exit codes and scenarios
                if [ $SCAN_EXIT_CODE -eq 0 ]; then
                    # Check if scan contains unsupported resources
                    if echo "$SCAN_OUTPUT" | grep -q "This resource kind is not supported by kubesec"; then
                        echo "‚ö†Ô∏è  $file contains unsupported resources - skipping security evaluation"
                        echo "üìã Supported resources: Pod, Deployment, DaemonSet, StatefulSet, ReplicaSet, Job, CronJob"
                        SKIPPED_FILES=$((SKIPPED_FILES + 1))
                    else
                        # Get the security score for supported resources
                        SCORE=$(echo "$SCAN_OUTPUT" | jq '.[0].score // 0' 2>/dev/null || echo "0")
                        
                        echo "üìä Extracted score: $SCORE"
                        
                        # Check if score is a valid number
                        if ! [[ "$SCORE" =~ ^-?[0-9]+$ ]]; then
                            echo "‚ö†Ô∏è  Invalid score format, treating as skipped"
                            SKIPPED_FILES=$((SKIPPED_FILES + 1))
                        elif [ "$SCORE" -ge 0 ]; then
                            echo "‚úÖ $file - Security score: $SCORE"
                            PASSED_FILES=$((PASSED_FILES + 1))
                        else
                            echo "‚ùå $file - Security score: $SCORE (CRITICAL SECURITY ISSUES)"
                            echo "üîß Security recommendations:"
                            echo "$SCAN_OUTPUT" | jq -r '.[0].scoring.critical[]?.reason // "No specific recommendations"' 2>/dev/null || true
                            echo "$SCAN_OUTPUT" | jq -r '.[0].scoring.advise[]?.reason // "No specific recommendations"' 2>/dev/null || true
                            FAILED_FILES=$((FAILED_FILES + 1))
                            SCAN_FAILED=true
                        fi
                    fi
                elif [ $SCAN_EXIT_CODE -eq 2 ]; then
                    # Check if it's actually unsupported resource with exit code 2
                    if echo "$SCAN_OUTPUT" | grep -q "This resource kind is not supported by kubesec"; then
                        echo "‚ö†Ô∏è  $file contains unsupported resources - skipping security evaluation"
                        echo "üìã Supported resources: Pod, Deployment, DaemonSet, StatefulSet, ReplicaSet, Job, CronJob"
                        SKIPPED_FILES=$((SKIPPED_FILES + 1))
                    else
                        echo "‚ö†Ô∏è  $file - Cannot scan (exit code: $SCAN_EXIT_CODE)"
                        echo "üìã This might be due to:"
                        echo "   - Invalid YAML syntax"
                        echo "   - Multi-document YAML files"
                        echo "   - Non-Kubernetes YAML files"
                        echo "   - Missing required fields"
                        echo "üîÑ Continuing with next file..."
                        SKIPPED_FILES=$((SKIPPED_FILES + 1))
                    fi
                else
                    echo "‚ö†Ô∏è  $file - Cannot scan (exit code: $SCAN_EXIT_CODE)"
                    echo "üîÑ Continuing with next file..."
                    SKIPPED_FILES=$((SKIPPED_FILES + 1))
                fi
            fi
            done < manifest-files.txt
            
            echo ""
            echo "=================================================="
            echo "üìä SCAN SUMMARY"
            echo "=================================================="
            echo "Total files scanned: $TOTAL_FILES"
            echo "Passed: $PASSED_FILES"
            echo "Failed: $FAILED_FILES"
            echo "Skipped: $SKIPPED_FILES"
            
            # Check if failed files exceed threshold
            if [ $FAILED_FILES -gt 1 ]; then
                echo "‚ùå Security scan failed: $FAILED_FILES files failed (threshold: 1)"
                echo "üîß Fix the security issues above before merging"
                echo "üìã Maximum allowed failures: 1"
                echo "üìã Current failures: $FAILED_FILES"
                exit 1
            elif [ $FAILED_FILES -eq 1 ]; then
                echo "‚ö†Ô∏è  Security scan warning: $FAILED_FILES file failed (at threshold)"
                echo "üìã Consider fixing the security issue, but allowing workflow to continue"
                echo "‚úÖ Workflow continues as failure count is within threshold"
            else
                echo "‚úÖ All scannable files passed security scan"
                echo "üìä Files with parsing errors or unsupported resources were skipped"
            fi

      - name: Generate detailed report
        if: steps.find-manifests.outputs.manifests-found == 'true'
        run: |
            echo "üìã Generating detailed security report..."

            echo "# Kubesec Security Report" > kubesec-report.md
            echo "Generated on: $(date)" >> kubesec-report.md
            echo "" >> kubesec-report.md

            echo "## Scanned Files" >> kubesec-report.md
            while IFS= read -r file; do
            echo "### $file" >> kubesec-report.md
            echo '```json' >> kubesec-report.md
            kubesec scan "$file" >> kubesec-report.md 2>/dev/null || echo "Failed to scan" >> kubesec-report.md
            echo '```' >> kubesec-report.md
            echo "" >> kubesec-report.md
            done < manifest-files.txt

            echo "Report generated: kubesec-report.md"

      - name: Upload kubesec report
        if: steps.find-manifests.outputs.manifests-found == 'true'
        uses: actions/upload-artifact@v4
        with:
            name: kubesec-security-report
            path: kubesec-report.md